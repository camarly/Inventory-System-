/*
 *   Project     : Sale
 *   Filename    : Sale.java
 *   Author      : Camarly Thomas <camarly@stu.ucc.edu.jm>
 *   Id.No.      : 20204241
 *   Course      : ITT
 *   Version     : 0.1
 *   Copyright   : All rights reserved 23 Nov 2021 05:01:50
 *   Description : 

 *   Function Name : 
 *   Purpose       : 
 *   Description   :

 */
package project;

import java.awt.Color;
import java.awt.print.PrinterException;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.MessageFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.TreeMap;
import java.util.concurrent.ThreadLocalRandom;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import static project.InventoryManager.DBUrl;
import static project.InventoryManager.DBpassword;
import static project.InventoryManager.DBuser;
import static project.InventoryManager.con;
import static project.InventoryManager.result;
import static project.InventoryManager.statement;
import static project.SQLscripts.con;

/**
 *
 * @author Camarly Thomas <camarly@stu.ucc.edu.jm>
 */
public class SaleWindow extends javax.swing.JFrame {

    static Connection con = null;
    static Statement statement = null;
    static Statement statement2 = null;
    static ResultSet result = null;

    static String DBUrl = "jdbc:mysql://localhost:3306/ThomasHardware";
    static String DBuser = "root";
    static String DBpassword = "root";
    static double subtotal = 0.00;
    static double total = 0.00;
    static double GCT = 0.165;
    static double change = 0.00;
    static double paymentAmnt = 0.00;
    static double TotalSalePrice = 0.00;

    LocalDate myDate = LocalDate.now();
    DefaultTableModel tableModel;
    String usr = MainFrame.sessionUsr;

    /**
     * Creates new form Sale
     */
    public SaleWindow() throws SQLException {
        initComponents();
        setDefaultCloseOperation(InventoryManager.DISPOSE_ON_CLOSE);
        tableModel = (DefaultTableModel) purchaseTable.getModel();
        dateField.setText(" " + myDate);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        purchaseTable = new javax.swing.JTable();
        printInvoiceButton = new javax.swing.JButton();
        itemIdField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        compSaleButton = new javax.swing.JButton();
        voidItemButton = new javax.swing.JButton();
        priceCheckButton = new javax.swing.JButton();
        addItemButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        customerNameField = new javax.swing.JTextField();
        billToAddressField = new javax.swing.JTextField();
        contactNoField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        paymentTypeLabel = new javax.swing.JLabel();
        paymentTypeDropDown = new javax.swing.JComboBox<>();
        ccNoField = new javax.swing.JTextField();
        paymentAmount = new javax.swing.JTextField();
        controlNo = new javax.swing.JLabel();
        amnt = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        deliveryComboBox = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        subTotalField = new javax.swing.JTextField();
        gctField = new javax.swing.JTextField();
        totalTextField = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        dateField = new javax.swing.JTextField();
        qtyTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        changeTextField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        viewInvoiceButton = new javax.swing.JButton();
        customerIDLable = new javax.swing.JLabel();
        customerIDField = new javax.swing.JTextField();

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        purchaseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ItemID", "Description", "Quantity", "UnitPrice", "TotalSalePrice"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        purchaseTable.setGridColor(new java.awt.Color(204, 255, 204));
        jScrollPane1.setViewportView(purchaseTable);
        if (purchaseTable.getColumnModel().getColumnCount() > 0) {
            purchaseTable.getColumnModel().getColumn(0).setResizable(false);
            purchaseTable.getColumnModel().getColumn(1).setResizable(false);
            purchaseTable.getColumnModel().getColumn(2).setResizable(false);
            purchaseTable.getColumnModel().getColumn(3).setResizable(false);
            purchaseTable.getColumnModel().getColumn(4).setResizable(false);
        }

        printInvoiceButton.setText("Print");
        printInvoiceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printInvoiceButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("ITEM");

        compSaleButton.setText("Complete Sale");
        compSaleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compSaleButtonActionPerformed(evt);
            }
        });

        voidItemButton.setText("VOID Item");
        voidItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voidItemButtonActionPerformed(evt);
            }
        });

        priceCheckButton.setText("Price Check");
        priceCheckButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceCheckButtonActionPerformed(evt);
            }
        });

        addItemButton.setText("Add Item");
        addItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Customer Name ");

        jLabel3.setText("Bill To Address");

        jLabel4.setText("Contact");

        jLabel5.setText("TRANSACTION INFORMATION");

        paymentTypeLabel.setText("Payment Type");

        paymentTypeDropDown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Credit Card", "Cheque", "Cash", "Bank Transfer" }));

        ccNoField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ccNoFieldActionPerformed(evt);
            }
        });

        paymentAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentAmountActionPerformed(evt);
            }
        });

        controlNo.setText("CC No.");

        amnt.setText("Amount");

        jLabel11.setText("MiHAWK 2021");

        jLabel14.setText("Version 1.0");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        jLabel6.setText("Delivery Mode");

        deliveryComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Delivery", "Pick Up", " " }));

        jLabel7.setText("Subtotal");

        jLabel8.setText("GCT");

        jLabel9.setText("TOTAL");

        subTotalField.setEditable(false);
        subTotalField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subTotalFieldActionPerformed(evt);
            }
        });

        gctField.setEditable(false);

        totalTextField.setEditable(false);

        jLabel10.setText("Date");

        dateField.setEditable(false);

        jLabel12.setText("QTY");

        changeTextField.setEditable(false);

        jLabel13.setText("Change");

        viewInvoiceButton.setText("View Invoice");
        viewInvoiceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewInvoiceButtonActionPerformed(evt);
            }
        });

        customerIDLable.setText("CustomerID ");

        customerIDField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerIDFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2))
                                .addGap(10, 10, 10)
                                .addComponent(contactNoField, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(customerIDLable)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(customerIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(257, 257, 257))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(115, 115, 115)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(customerNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(billToAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 241, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(controlNo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(amnt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(paymentTypeLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(deliveryComboBox, 0, 133, Short.MAX_VALUE)
                            .addComponent(paymentAmount, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                            .addComponent(ccNoField, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                            .addComponent(paymentTypeDropDown, 0, 1, Short.MAX_VALUE)
                            .addComponent(dateField))
                        .addGap(17, 17, 17))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(itemIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(qtyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(addItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(priceCheckButton)
                        .addGap(18, 18, 18)
                        .addComponent(voidItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(viewInvoiceButton)
                        .addGap(18, 18, 18)
                        .addComponent(compSaleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(printInvoiceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                        .addComponent(jLabel13)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(subTotalField, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gctField, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(changeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(292, 292, 292)
                .addComponent(jLabel5)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(customerIDLable)
                                    .addComponent(customerIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(customerNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(billToAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(paymentTypeLabel)
                                    .addComponent(paymentTypeDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(controlNo)
                                    .addComponent(ccNoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(amnt)
                                    .addComponent(paymentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(deliveryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(contactNoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(12, 12, 12)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(subTotalField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(gctField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(totalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(changeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addGap(84, 84, 84))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(itemIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(qtyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(priceCheckButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(voidItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(viewInvoiceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(compSaleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(printInvoiceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(53, 53, 53))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void paymentAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_paymentAmountActionPerformed

    private void ccNoFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ccNoFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ccNoFieldActionPerformed

    private void subTotalFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subTotalFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_subTotalFieldActionPerformed


    private void voidItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voidItemButtonActionPerformed
        // TODO add your handling code here:
        int row = purchaseTable.getSelectedRow();
        if (row >= 0) {
            tableModel.removeRow(row);
            calcTotals(subtotal, total, TotalSalePrice);
            MiHawk.tableDelMsg();

        } else {
            MiHawk.tableDeleteErrorMsg();
        }
    }//GEN-LAST:event_voidItemButtonActionPerformed


    private void addItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemButtonActionPerformed
        try {
            // TODO add your handling code here:
            addItem();
        } catch (SQLException ex) {
            Logger.getLogger(SaleWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addItemButtonActionPerformed


    private void printInvoiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printInvoiceButtonActionPerformed
        // TODO add your handling code here:
//        MessageFormat header = new MessageFormat("Printing");
//        MessageFormat footer = new MessageFormat("Page {0, number, integer}");
//        
//        try {
//            jTable.print(JTable.PrintMode.Normal, header, footer);
//        } catch (PrinterException e) {
//            System.err.format("No Printer Found", e.getMessage);
//        }
    }//GEN-LAST:event_printInvoiceButtonActionPerformed

    private void viewInvoiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewInvoiceButtonActionPerformed
        // TODO add your handling code here:
//        createInvoice();
        viewInvoice();
    }//GEN-LAST:event_viewInvoiceButtonActionPerformed

    private void priceCheckButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceCheckButtonActionPerformed
        try {
            // TODO add your handling code here:
            addItem();
        } catch (SQLException ex) {
            Logger.getLogger(SaleWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_priceCheckButtonActionPerformed

//creating customer and completing the sale
    private void compSaleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compSaleButtonActionPerformed
        try {
            completeSale(usr);
//            createCustomer();
        } catch (SQLException ex) {
            Logger.getLogger(SaleWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_compSaleButtonActionPerformed


    private void customerIDFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerIDFieldActionPerformed

    }//GEN-LAST:event_customerIDFieldActionPerformed

    private void calcTotals(double sub, double total1, double tp) {
        double subtotal = sub;
        double total = total1;
        double GCT = 0.165;
        double change = 0.00;
        String ItemID = "";
        String Description = "";
        double UnitPrice = 0.00;
        double TotalSalePrice = tp;
        double payment = 0.00;

        for (int row = 0; row < purchaseTable.getRowCount(); row++) {
            subtotal = subtotal + TotalSalePrice;
        }

        payment = Double.parseDouble(paymentAmount.getText());
        GCT *= subtotal;
        total = total + (subtotal + GCT);
        change = (payment - total);
        subTotalField.setText(Double.toString(subtotal));
        gctField.setText(Double.toString(GCT));
        totalTextField.setText(Double.toString(total));
        changeTextField.setText(Double.toString(change));

    }

    public void addItem() throws SQLException {

        String SQL = "{CALL getItemInfo(?)}";

        String item = itemIdField.getText();
        int qty = Integer.parseInt(qtyTextField.getText());

        String ItemID = "";
        String Description = "";
        double UnitPrice = 0.00;

        con = Database.getConnection(DBUrl, DBuser, DBpassword);
        try (CallableStatement cstmt = con.prepareCall(SQL); CallableStatement pstmt = con.prepareCall(SQL);) {
            cstmt.setString(1, item);
            ResultSet rest = cstmt.executeQuery();
            setSalePrice_To_UnderStockValue();

            String[] columns = {"ItemID", "Description", "Quantity", "UnitPrice", "TotalSalePrice"};

            while (rest.next()) {
                try {
                    ItemID = rest.getString("ItemID");
                    Description = rest.getString("ItemDescription");
                    UnitPrice = rest.getDouble("UnitSalePrice");

                    TotalSalePrice = UnitPrice * qty;

                    Object[] data = {ItemID, Description, qty, UnitPrice, TotalSalePrice};
                    tableModel.insertRow(tableModel.getRowCount(), data);
                    calcTotals(subtotal, total, TotalSalePrice);

                    setSalePrice_To_UnderStockValue();
                } catch (NumberFormatException | SQLException e) {
                    if (rest.getString("ItemID") == null ? item != null : !rest.getString("ItemID").equals(item)) {
                        JFrame errorWindow = new JFrame();
                        JOptionPane.showMessageDialog(errorWindow, "Item not Found, Please check the Item number sheet", "Item Error", JOptionPane.ERROR_MESSAGE);
                    } else if ((rest.getInt("TotalInStock") < qty)) {
                        JFrame errorWindow = new JFrame();
                        JOptionPane.showMessageDialog(errorWindow, "Insufficent Quantity available", "Quantity Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

//    public void createInvoice() {
//        String cxID = customerIDField.getText();
//        String cxName = customerNameField.getText();
//        String cxAddress = billToAddressField.getText();
//        String cxContact = contactNoField.getText();
//        String cxPaymentType = paymentTypeDropDown.getSelectedItem().toString();
//        String cxAmountPaid = paymentAmount.getText();
//        String cxDeliveryType = deliveryComboBox.getSelectedItem().toString();
//        String itemID = "";
//        String desc = "";
//        int qty = 0;
//        Double pPrice = 0.00;
//        Double salePrice = 0.00;
//        Double uStockVal = 0.00;
//
//        int row = purchaseTable.getSelectedRow();
//        if (row >= 0) {
//
//            System.out.println(cxName + "\n" + cxAddress + "\n" + cxContact + "\n" + cxPaymentType + "\n" + cxAmountPaid + "\n" + cxDeliveryType);
//            for (int i = 0; i < tableModel.getRowCount(); i++) {
//                System.out.print("Item ID: " + (tableModel.getValueAt(row, 0).toString()) + "\n");
//                System.out.print("Descripton: " + (tableModel.getValueAt(row, 1).toString()) + "\n");
//                System.out.print("Quantity: " + ((tableModel.getValueAt(row, 2).toString())) + "\n");
//                System.out.print("Unit Sale Price: " + Double.parseDouble((tableModel.getValueAt(row, 3).toString())) + "\n");
//                System.out.print("Total Sale Price: " + Double.parseDouble((tableModel.getValueAt(row, 4).toString())) + "\n");
//            }
//            System.out.println();
//            System.out.println();
//            System.out.println(subTotalField.getText());
//            System.out.println(gctField.getText());
//            System.out.println(totalTextField.getText());
//            System.out.println(changeTextField.getText());
//        }
//    }

    public void viewInvoice() {
        String cxID = customerIDField.getText();
        String cxName = customerNameField.getText();
        String cxAddress = billToAddressField.getText();
        String cxContact = contactNoField.getText();
        String cxPaymentType = paymentTypeDropDown.getSelectedItem().toString();
        String cxAmountPaid = paymentAmount.getText();
        String cxDeliveryType = deliveryComboBox.getSelectedItem().toString();
        LocalDateTime date = LocalDateTime.now();
        DateTimeFormatter myFormatObj = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");
        int invoiceNumber = ThreadLocalRandom.current().nextInt(Integer.MAX_VALUE);
        ArrayList<String> purchasedItems = new ArrayList<>();
        ArrayList<ArrayList> lineItems = new ArrayList<>();

        String itemNo = "";
        String descr = "";
        int qty = 0;
        double unitPrice = 0.00;
        double totalPrice = 0.00;

        JFrame invoiceFrame = new JFrame();
        invoiceFrame.setTitle("Customer Invoice");
        invoiceFrame.setBackground(Color.white);
        invoiceFrame.setSize(720, 720);
        setDefaultCloseOperation(invoiceFrame.DISPOSE_ON_CLOSE);

        JPanel invoicePanel = new JPanel();
        invoicePanel.setSize(720, 720);

        JTextArea cxInvoice2 = new JTextArea();

        cxInvoice2.append(
                "\n\t\tTHOMAS' HARDWARE EMPORIUM"
                + "\n\t\t1A Thomas's Street \n\t\tCatholic Circle\n\t\tJamaica W.I\n\t\t876-470-9618 "
                + "\n\t\temail:customersupport@HardwareEmporium \n\t\twebsite: https://HardwareEmporium.com"
                + "\n"
                + "\n\t\tInvoice No: " + invoiceNumber
                + "\n\t\tBilled to:"
                + "\n\t\t" + cxName
                + "\n\t\t" + cxAddress
                + "\n\t\t" + cxContact
                + "\n\n\t\tDate: " + myDate + "\n"
                + "----------------------------------------------------------------------------------------------"
                + "\nItemNo\tDESCRIPTION       \t\t QTY  \t UNIT PRICE \t TOTAL PRICE\n"
                + "----------------------------------------------------------------------------------------------\n");

        int ii = purchaseTable.getRowCount();

        int ll = tableModel.getRowCount();
        int mm = tableModel.getColumnCount();
        String[][] myItems = new String[ll][mm];
        if (ii >= 0) {

            for (int row = 0; row < ll; row++) {
                for (int k = 0; k < mm; k++) {
                    if (tableModel.getValueAt(row, row).getClass() == String.class) {
                        myItems[row][k] = ((tableModel.getValueAt(row, k).toString()));
                    } else if (tableModel.getValueAt(row, row).getClass() == Double.class) {
                        myItems[row][k] = String.valueOf((tableModel.getValueAt(row, k).toString()));
                    } else if (tableModel.getValueAt(row, row).getClass() == Integer.class) {
                        myItems[row][k] = String.valueOf((tableModel.getValueAt(row, k).toString()));
                    }
                    cxInvoice2.append(myItems[row][k] + " " + "\t");
                }
                cxInvoice2.append("\n");
            }

            subtotal = Double.parseDouble(subTotalField.getText());
            GCT = Double.parseDouble(gctField.getText());
            total = Double.parseDouble(totalTextField.getText());
            paymentAmnt = Double.parseDouble(paymentAmount.getText());
            change = Double.parseDouble(changeTextField.getText());

            cxInvoice2.append(
                    "\n\n----------------------------------------------------------------------------------------------"
                    + "\n\n\n                                      \t-------------------------------------------------------------------\n"
                    + "\t\t               \t               \t SUBTOTAL:       $" + subtotal
                    + "\n\t\t               \t               \t TAX:            $" + GCT
                    + "\n\t\t               \t               \t TOTAL:          $" + total
                    + "\n\t\t               \t               \t PYMNT:          $" + paymentAmnt
                    + "\n\t\t               \t               \t CHANGE:         $" + change
                    + "\n\n\n\n-----------------------------Thomas Hardware Emporium -----------------------------------------------"
                    + "\n-----------------------------We'll help you build futures------------------------------------------------");

            invoicePanel.add(cxInvoice2);

            invoiceFrame.add(invoicePanel);

            invoiceFrame.setVisible(true);

            System.out.printf("\n\t\tTHOMAS' HARDWARE EMPORIUM");
            System.out.printf("\n\t\t1A Thomas's Street \n\t\tCatholic Circle\n\t\tJamaica W.I\n\t\t876-470-9618 ");
            System.out.printf("\n\t\temail:customersupport@HardwareEmporium \n\t\twebsite: https://HardwareEmporium.com");
            System.out.println("\n");
            System.out.println("\n\t\tInvoice No: " + invoiceNumber);
            System.out.printf("\n\t\tBilled to:");
            System.out.printf("\n\t\t%s", cxName);
            System.out.printf("\n\t\t%s", cxAddress);
            System.out.printf("\n\t\t%s", cxContact);
            System.out.println("\n\n\t\tDate: " + date.format(myFormatObj) + "\n");
            System.out.print("----------------------------------------------------------------------------------------------");
            System.out.printf("\nItemNo\tDESCRIPTION       \t\t QTY  \t UNIT PRICE \t TOTAL PRICE\n");
            System.out.print("----------------------------------------------------------------------------------------------\n");

            int i = purchaseTable.getRowCount();

            int l = tableModel.getRowCount();
            int m = tableModel.getColumnCount();

        }

        subtotal = Double.parseDouble(subTotalField.getText());
        GCT = Double.parseDouble(gctField.getText());
        total = Double.parseDouble(totalTextField.getText());
        paymentAmnt = Double.parseDouble(paymentAmount.getText());
        change = Double.parseDouble(changeTextField.getText());

        System.out.print("\n\n----------------------------------------------------------------------------------------------");
        System.out.printf("\n\n\n                                      \t------------------------------------------------------\n");
        System.out.printf("    \t\t               \t               \t SUBTOTAL       \t $%.2f\n", subtotal);
//        System.out.printf("    \t               \t               \t DISCOUNT       \t $%.2f\n", discount);
        System.out.printf("    \t\t               \t               \t TAX            \t $%.2f\n", (GCT));
        System.out.printf("    \t\t               \t               \t TOTAL          \t $%.2f\n", total);
        System.out.printf("   \t\t               \t               \t PYMNT          \t $%.2f\n", paymentAmnt);
        System.out.printf("   \t\t               \t               \t CHANGE          \t $%.2f\n", change);
        System.out.print("\n\n\n-----------------------------Thomas Hardware Emporium -----------------------------------------------");
        System.out.print("\n-----------------------------We'll help you build futures--------------------------------------------");
    }

    public int createCustomer() throws SQLException {

//        String[] customerInfo = new String[4];

        int cxID = Integer.parseInt(customerIDField.getText());
        String cxName = customerNameField.getText();
        String cxAddress = billToAddressField.getText();
        String cxContact = contactNoField.getText();

        String sqlUpdateCustomer = "INSERT INTO Customer (CustomerID, CustomerName, CustomerAddress, Telephone) VALUES (" + "'" + cxID + "'" + "," + "'" + cxName + "'" + "," + "'" + cxAddress + "'" + "," + "'" + cxContact + "'" + ")";
        con = Database.getConnection(DBUrl, DBuser, DBpassword);
        try {
            statement = con.createStatement();
            statement.executeUpdate(sqlUpdateCustomer);
            JFrame errorWindow = new JFrame();
            JOptionPane.showMessageDialog(errorWindow, "Customer Created");

        } catch (SQLException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            JFrame errorWindow = new JFrame();
            JOptionPane.showMessageDialog(errorWindow, "Error with creating customer, please check values or fields");
        }
        return cxID;
    }

    private int getSaleID(int cxID) throws SQLException {

        int id = 0;
        int customer = cxID;

        String sql = "SELECT OrderSaleID FROM SaleOrder WHERE CustomerID = '" + customer + "'";

        con = Database.getConnection(DBUrl, DBuser, DBpassword);
        try {
            statement = con.createStatement();
            result = statement.executeQuery(sql);
            while (result.next()) {
                id = result.getInt("OrderSaleID");
                System.out.println(id);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        return id;
    }

//completes the sale
    private void completeSale(String usr) throws SQLException {

        int cxID = createCustomer();
        String user = usr;
        String itemID = "";
        String UserID = user;
        String itemDescription = "";
        double totalSalePrice = 0.00;
        int quantitySold = 0;
        double unitPrice = 0.00;

//        int id = 0;

        String purchaseDate = myDate.toString();
        java.util.Date date = new java.util.Date();
        java.sql.Date sqlDate = new java.sql.Date(date.getTime());

        String SQLGet = "{CALL addSaleOrder(?)}";
        String SQLUpdate = "{CALL makeSale(?, ?, ?, ?, ?)}";
//        String idSale = "LAST_INSERT_ID()";
//        String idSale = "SELECT * FROM SALEORDER";

        con = Database.getConnection(DBUrl, DBuser, DBpassword);
        int i = purchaseTable.getRowCount();
        try (CallableStatement cstmt = con.prepareCall(SQLGet); CallableStatement pstmt = con.prepareCall(SQLUpdate);) {

            cstmt.setInt(1, cxID);
            cstmt.executeQuery();
            int id = getSaleID(cxID);
            System.out.println(id);
//            Statement stmntID = con.createStatement();
//            ResultSet idResult = stmntID.executeQuery(idSale);
//            while(idResult.next()) {
//                idResult.getInt(1);
//            }
            
            if (i >= 0) {
                for (int row = 0; row < tableModel.getRowCount(); row++) {
                    itemID = (tableModel.getValueAt(row, 0).toString());
                    itemDescription = (tableModel.getValueAt(row, 1).toString());
                    quantitySold = Integer.parseInt((tableModel.getValueAt(row, 2).toString()));
                    unitPrice = Double.parseDouble((tableModel.getValueAt(row, 3).toString()));
                    totalSalePrice = Double.parseDouble((tableModel.getValueAt(row, 4).toString()));
//                }
//                for(int row = 0; row < tableModel.getRowCount(); row++) {

                    pstmt.setInt(1, id);
                    pstmt.setString(2, itemID);
                    pstmt.setInt(3, quantitySold);
                    pstmt.setDouble(4, totalSalePrice);
                    pstmt.setString(5, myDate.toString());
                    pstmt.execute();
                }
                updateItemDatabase(itemID);
                    
            }
            JFrame errorWindow = new JFrame();
            JOptionPane.showMessageDialog(errorWindow, "Sale Completed");

        } catch (SQLException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            JFrame errorWindow = new JFrame();
            JOptionPane.showMessageDialog(errorWindow, "Error with completing sales, please check values or fields");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SaleWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SaleWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SaleWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SaleWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new SaleWindow().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(SaleWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addItemButton;
    private javax.swing.JLabel amnt;
    private javax.swing.JTextField billToAddressField;
    private javax.swing.JTextField ccNoField;
    private javax.swing.JTextField changeTextField;
    private javax.swing.JButton compSaleButton;
    private javax.swing.JTextField contactNoField;
    private javax.swing.JLabel controlNo;
    private javax.swing.JTextField customerIDField;
    private javax.swing.JLabel customerIDLable;
    private javax.swing.JTextField customerNameField;
    private javax.swing.JTextField dateField;
    private javax.swing.JComboBox<String> deliveryComboBox;
    private javax.swing.JTextField gctField;
    private javax.swing.JTextField itemIdField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField paymentAmount;
    private javax.swing.JComboBox<String> paymentTypeDropDown;
    private javax.swing.JLabel paymentTypeLabel;
    private javax.swing.JButton priceCheckButton;
    private javax.swing.JButton printInvoiceButton;
    private javax.swing.JTable purchaseTable;
    private javax.swing.JTextField qtyTextField;
    private javax.swing.JTextField subTotalField;
    private javax.swing.JTextField totalTextField;
    private javax.swing.JButton viewInvoiceButton;
    private javax.swing.JButton voidItemButton;
    // End of variables declaration//GEN-END:variables

    //upate database stock after sale
    private void updateItemDatabase(String ID) throws SQLException {

        String itemID = ID;
        String itemDescription = "";
        double totalSalePrice = 0.00;
        int quantitySold = 0;
        double updatedQTY = 0;
        int databaseQTY = 0;
        double unitPrice = 0.00;
        String purchaseDate = myDate.toString();

        con = Database.getConnection(DBUrl, DBuser, DBpassword);
        try {
            int i = purchaseTable.getRowCount();
            System.out.println(i);
            if (i >= 0) {
                for (int row = 0; row < tableModel.getRowCount(); row++) {
                    itemID = (tableModel.getValueAt(row, 0).toString());
                    itemDescription = (tableModel.getValueAt(row, 1).toString());
                    quantitySold = Integer.parseInt((tableModel.getValueAt(row, 2).toString()));
                    unitPrice = Double.parseDouble((tableModel.getValueAt(row, 3).toString()));
                    totalSalePrice = Double.parseDouble((tableModel.getValueAt(row, 4).toString()));
                    databaseQTY = getItemQuantity(itemID);
                    updatedQTY = databaseQTY - quantitySold;

                    String sqlUpdateSales = "UPDATE Item SET TotalInStock='" + updatedQTY + "'" + " WHERE ItemId = '" + itemID + "'";

//            statement = con.createStatement();
                    Statement statement2 = con.createStatement();
                    statement2.executeUpdate(sqlUpdateSales);

                }
            }
            JFrame errorWindow = new JFrame();
//            JOptionPane.showMessageDialog(errorWindow, "Sale Completed");

        } catch (SQLException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
//            JFrame errorWindow = new JFrame();
//            JOptionPane.showMessageDialog(errorWindow, "Error with completing sales, please check values or fields");
        }

    }

    public int getItemQuantity(String ID) throws SQLException {

        String itemID = ID;
        int TotalInStock = 0;
        try {
            con = Database.getConnection(DBUrl, DBuser, DBpassword);
            statement = con.createStatement();
            result = statement.executeQuery("SELECT TotalInStock FROM Item WHERE ItemID = '" + itemID + "'");

//            String[] columns = {"ItemID", "Description", "TotalInStock", "UnitPurchasePrice", "UnitSalePrice", "UnderStockValue"};            
            while (result.next()) {
                TotalInStock = result.getInt("TotalInStock");

            }
        } catch (SQLException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }

        return TotalInStock;

    }

    private void setSalePrice_To_UnderStockValue() {

        String item = itemIdField.getText();
        double SalePrice = 0.00;
        double underStock = 0.00;
        int qty = 0;

        try {
            con = Database.getConnection(DBUrl, DBuser, DBpassword);
            statement = con.createStatement();
            statement2 = con.createStatement();
            result = statement.executeQuery("SELECT * FROM Item WHERE ItemID = '" + item + "'");

            while (result.next()) {
                qty = result.getInt("TotalInStock");
                SalePrice = result.getDouble("UnitSalePrice");
                underStock = result.getDouble("UnderStockValue");
//                System.out.println(qty + ", " + SalePrice + ", " + underStock);
                if (qty <= 5) {
                    statement2.executeUpdate("UPDATE Item SET UnitSalePrice = '" + underStock + "'");
                } else {
                    statement2.executeUpdate("UPDATE Item SET UnitSalePrice = '" + SalePrice + "'");
                }

            }
        } catch (SQLException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
}
