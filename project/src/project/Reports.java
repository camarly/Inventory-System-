/*
 *   Project     : Reports
 *   Filename    : Reports.java
 *   Author      : Camarly Thomas <camarly@stu.ucc.edu.jm>
 *   Id.No.      : 20204241
 *   Course      : ITT
 *   Version     : 0.1
 *   Copyright   : All rights reserved 23 Nov 2021 19:07:54
 *   Description : 

 *   Function Name : 
 *   Purpose       : 
 *   Description   :

 */
package project;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import javax.swing.JFileChooser;
import java.awt.Desktop;
import java.sql.CallableStatement;
import java.util.Scanner;
import javax.swing.JOptionPane;
import static project.SQLscripts.DBUrl;
import static project.SQLscripts.DBpassword;
import static project.SQLscripts.DBuser;
import static project.SQLscripts.con;
import static project.SQLscripts.result;
//import org.apache.poi.xssf.usermodel.

/**
 *
 * @author Camarly Thomas <camarly@stu.ucc.edu.jm>
 */
public class Reports extends javax.swing.JFrame {

    static Connection con = null;
    static Statement statement = null;
    static ResultSet result = null;

    static String DBUrl = "jdbc:mysql://localhost:3306/ThomasHardware";
    static String DBuser = "root";
    static String DBpassword = "root";

    LocalDate myDate = LocalDate.now();

    DefaultTableModel tableModel;

    /**
     * Creates new form Reports
     */
    public Reports() {
        initComponents();
        setDefaultCloseOperation(Reports.DISPOSE_ON_CLOSE);
        tableModel = (DefaultTableModel) dQTYReportTable.getModel();
        dateField.setText(" " + myDate);
        dateField2.setText(" " + myDate);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        QTYreportTab = new javax.swing.JTabbedPane();
        qtyReport = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        dQTYReportTable = new javax.swing.JTable();
        runButton = new javax.swing.JButton();
        viewButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        dateField2 = new javax.swing.JTextField();
        itemSaleReport = new javax.swing.JPanel();
        runButton2 = new javax.swing.JButton();
        viewButton2 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        tSalesReportTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        dateField = new javax.swing.JTextField();

        jScrollPane1.setViewportView(jTextPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 255, 204));

        qtyReport.setBackground(new java.awt.Color(204, 255, 204));

        dQTYReportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Description", "Total In Stock", "Purchase Price", "Sale Price", "UnderStock Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dQTYReportTable.setGridColor(new java.awt.Color(204, 255, 204));
        jScrollPane2.setViewportView(dQTYReportTable);

        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        viewButton.setText("Export");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Date:");

        dateField2.setEditable(false);
        dateField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateField2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout qtyReportLayout = new javax.swing.GroupLayout(qtyReport);
        qtyReport.setLayout(qtyReportLayout);
        qtyReportLayout.setHorizontalGroup(
            qtyReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 879, Short.MAX_VALUE)
            .addGroup(qtyReportLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(runButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, qtyReportLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dateField2, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );
        qtyReportLayout.setVerticalGroup(
            qtyReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, qtyReportLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(qtyReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(dateField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addGroup(qtyReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(runButton)
                    .addComponent(viewButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        QTYreportTab.addTab("Daily Quantity report", qtyReport);

        itemSaleReport.setBackground(new java.awt.Color(204, 255, 204));

        runButton2.setText("Run");
        runButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButton2ActionPerformed(evt);
            }
        });

        viewButton2.setText("Export");
        viewButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButton2ActionPerformed(evt);
            }
        });

        tSalesReportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Description", "Quantity Sold", "Total Sale Amouint", "Purchase Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tSalesReportTable.setGridColor(new java.awt.Color(204, 255, 204));
        jScrollPane6.setViewportView(tSalesReportTable);

        jLabel1.setText("Date:");

        dateField.setEditable(false);
        dateField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout itemSaleReportLayout = new javax.swing.GroupLayout(itemSaleReport);
        itemSaleReport.setLayout(itemSaleReportLayout);
        itemSaleReportLayout.setHorizontalGroup(
            itemSaleReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemSaleReportLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(runButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewButton2)
                .addContainerGap(707, Short.MAX_VALUE))
            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, itemSaleReportLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dateField, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );
        itemSaleReportLayout.setVerticalGroup(
            itemSaleReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemSaleReportLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(itemSaleReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(dateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56)
                .addGroup(itemSaleReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(runButton2)
                    .addComponent(viewButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE))
        );

        QTYreportTab.addTab("Total Sales per Item per Month", itemSaleReport);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(QTYreportTab)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(QTYreportTab)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void dateFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateFieldActionPerformed

    private void dateField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateField2ActionPerformed

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        // TODO add your handling code here:
        toExcel();
    }//GEN-LAST:event_viewButtonActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        // TODO add your handling code here:
        Connection con = null;
        //        Statement statement = null;
        //        ResultSet result = null;
        //        Boolean tabelupdated = false;
        //
        //        String DBUrl = "jdbc:mysql://localhost:3306/ThomasHardware";
        //        String DBuser = "root";
        //        String DBpassword = "root";

        try {
            con = Database.getConnection(DBUrl, DBuser, DBpassword);
            statement = con.createStatement();
            result = statement.executeQuery("SELECT * FROM Item");
            //                itemTable.setModel((TableModel) result);

            String[] columns = {"ItemID", "Description", "TotalInStock", "UnitPurchasePrice", "UnitSalePrice", "UnderStockValue"};
            //
            while (result.next()) {
                String ItemID = result.getString("ItemID");
                String Description = result.getString("ItemDescription");
                int TotalInStock = result.getInt("TotalInStock");
                double PurchasePrice = result.getDouble("UnitPurchasePrice");
                double SalePrice = result.getDouble("UnitSalePrice");
                double UnderStockValue = result.getDouble("UnderStockValue");

                Object[] data = {ItemID, Description, TotalInStock, PurchasePrice, SalePrice, UnderStockValue};
                tableModel = (DefaultTableModel) dQTYReportTable.getModel(); //testing table model;
                tableModel.insertRow(tableModel.getRowCount(), data);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_runButtonActionPerformed

    private void runButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButton2ActionPerformed
        // TODO add your handling code here:
        Connection con = null;
        String SQL = "{CALL Report2()}";
        String role = "";

        try {
            con = Database.getConnection(DBUrl, DBuser, DBpassword);
        } catch (SQLException ex) {
            Logger.getLogger(Reports.class.getName()).log(Level.SEVERE, null, ex);
        }
        String[] columns = {"ItemID", "Description", "TotalInStock", "UnitPurchasePrice", "UnitSalePrice", "UnderStockValue"};
        try (CallableStatement cstmt = con.prepareCall(SQL); CallableStatement pstmt = con.prepareCall(SQL);) {
            result = cstmt.executeQuery();

//            //                itemTable.setModel((TableModel) result);

            while (result.next()) {
                String ItemID = result.getString("ItemID");
                String Description = result.getString("ItemDescription");
                
                int QTYSOLD = result.getInt("QTYSOLD");
                double SalePrice = result.getDouble("TOTALSALEAMNTPERITem");
//                String date = result.getString("PurchaseDate");

                Object[] data = {ItemID, Description, QTYSOLD, SalePrice};
                tableModel = (DefaultTableModel) tSalesReportTable.getModel(); //testing table model;
                tableModel.insertRow(tableModel.getRowCount(), data);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_runButton2ActionPerformed

    private void viewButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButton2ActionPerformed
        toExcelReport2();
    }//GEN-LAST:event_viewButton2ActionPerformed

    //open file for saving
    public void openFileReport2(String file) {
        try {
            File path = new File(file);
            Desktop.getDesktop().open(path);
        } catch (IOException e) {
            System.out.print(e);
        }
    }

    public void toExcelReport2() {
        try {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.showSaveDialog(this);
            File saveFile = fileChooser.getSelectedFile();
            if (saveFile != null) {
                saveFile = new File(saveFile.toString() + ".xlsx");
                
                    Workbook workbook = new XSSFWorkbook();
                    Sheet worksheet = workbook.createSheet("Report2");
                    Row rowCol = worksheet.createRow(0);
                    
                    for (int i = 0; i < tSalesReportTable.getColumnCount(); i++) {
                        Cell cell = rowCol.createCell(i);
                        cell.setCellValue(tSalesReportTable.getColumnName(i));
//                        data.put("-1", new Object[]{tableModel.getColumnName(column)});
                    }
                    for (int j = 0; j < tSalesReportTable.getRowCount(); j++) {
                        Row row = worksheet.createRow(j+1);
                        for (int k = 0; k < tSalesReportTable.getColumnCount(); k++) {
//                        row.setCellValue(dQTYReportTable.valueAt(k));
                            Cell cell = row.createCell(k);
                            if (tSalesReportTable.getValueAt(j, k) != null) {
                                cell.setCellValue(tSalesReportTable.getValueAt(j, k).toString());
                            }
                        }

                    }
                    FileOutputStream output = new FileOutputStream(new File(saveFile.toString()));
                    workbook.write(output);
                output.close();
                openFileReport2(saveFile.toString());
            } else {
                JOptionPane.showMessageDialog(null, "Error saving file");
            }
        } catch (FileNotFoundException e) {
            System.out.print(e);
        } catch (IOException e) {
            System.out.print(e);
        }
    }


//open file for saving
    public void openFile(String file) {
        try {
            File path = new File(file);
            Desktop.getDesktop().open(path);
        } catch (IOException e) {
            System.out.print(e);
        }
    }

    public void toExcel() {
        try {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.showSaveDialog(this);
            File saveFile = fileChooser.getSelectedFile();
            if (saveFile != null) {
                saveFile = new File(saveFile.toString() + ".xlsx");
                
                    Workbook workbook = new XSSFWorkbook();
                    Sheet worksheet = workbook.createSheet("Report");
                    Row rowCol = worksheet.createRow(0);
                    
                    for (int i = 0; i < dQTYReportTable.getColumnCount(); i++) {
                        Cell cell = rowCol.createCell(i);
                        cell.setCellValue(dQTYReportTable.getColumnName(i));
//                        data.put("-1", new Object[]{tableModel.getColumnName(column)});
                    }
                    for (int j = 0; j < dQTYReportTable.getRowCount(); j++) {
                        Row row = worksheet.createRow(j+1);
                        for (int k = 0; k < dQTYReportTable.getColumnCount(); k++) {
//                        row.setCellValue(dQTYReportTable.valueAt(k));
                            Cell cell = row.createCell(k);
                            if (dQTYReportTable.getValueAt(j, k) != null) {
                                cell.setCellValue(dQTYReportTable.getValueAt(j, k).toString());
                            }
                        }

                    }
                    FileOutputStream output = new FileOutputStream(new File(saveFile.toString()));
                    workbook.write(output);
                output.close();
                openFile(saveFile.toString());
            } else {
                JOptionPane.showMessageDialog(null, "Error saving file");
            }
        } catch (FileNotFoundException e) {
            System.out.print(e);
        } catch (IOException e) {
            System.out.print(e);
        }

    }

//getinformation from jTable(reports table)
    private String getCellData(int x, int y) {
        return tableModel.getValueAt(x, y).toString();
    }

//    //push results to excel file
//    private void toExcel() {
//
//        //creating workbook(excel sheets/file)
//        XSSFWorkbook workbook = new XSSFWorkbook();
//        XSSFSheet worksheet = workbook.createSheet();
//
//        //load data to map;
//        TreeMap<String, Object[]> data = new TreeMap<>();
//
//        //add columns
////        int i = dQTYReportTable.getColumnCount();
////        int column = 0;
////        if (i >= 0) {
////            for (column = 0; column < tableModel.getColumnCount(); column++) {
////                data.put("-1", new Object[]{tableModel.getColumnName(column)});
////            }
////        }
////
//////      //add rows
////        int k = dQTYReportTable.getRowCount();
////        if (k >= 0) {
////            for (int row = 0; row < tableModel.getRowCount(); row++) {
////                    data.put(Integer.toString(row), new Object[]{getCellData(row, column)});
////                    column++;
////            }
////        } 
////        data.put("0", new Object[]{tableModel.getColumnName(column)});
////        data.put("1", new Object[]{getCellData(row, column)});
//        //loading columns and rows.
////        int i = dQTYReportTable.getRowCount();
////        if (i >= 0) {
////            for(int row=0; row<tableModel.getRowCount(); row++) {
////                for(int column=0; column<tableModel.getColumnCount(); column++) {
////                    data.put("0", new Object[]{tableModel.getColumnName(column)});
////                    data.put("1", new Object[]{getCellData(row, column)});
////                }
////            }
////        }
//        //write data to sheet
//        Set<String> iDs = data.keySet();
//        XSSFRow row;
//        int rowID = 0;
//        int cellID = 0;
//
//        for (String key : iDs) {
//            row = worksheet.createRow(rowID++);
//
//            //data from each key
//            Object[] values = data.get(key);
//            for (Object obj : values) {
//                Cell cell = row.createCell(cellID++);
//                cell.setCellValue(obj.toString());
//            }
//        }
//
//        //write data save excel file system
//        try {
//            try (FileOutputStream fileOutStream = new FileOutputStream(new File("./reports.xlsx"))) {
//                workbook.write(fileOutStream);
//            }
//        } catch (FileNotFoundException e) {
//////            Logger.getLogger(WorkBookNSheet.class.getName()).log(Level.SEVERE, null, e);
////// 
//
//        } catch (IOException e) {
//            Logger.getLogger(Reports.class.getName()).log(Level.SEVERE, null, e);
//        }
//
//    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Reports().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane QTYreportTab;
    private javax.swing.JTable dQTYReportTable;
    private javax.swing.JTextField dateField;
    private javax.swing.JTextField dateField2;
    private javax.swing.JPanel itemSaleReport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JPanel qtyReport;
    private javax.swing.JButton runButton;
    private javax.swing.JButton runButton2;
    private javax.swing.JTable tSalesReportTable;
    private javax.swing.JButton viewButton;
    private javax.swing.JButton viewButton2;
    // End of variables declaration//GEN-END:variables
}
